/**
 * Project Name : jbp-framework <br>
 * File Name : NamedQueryOperator.java <br>
 * Package Name : com.asdc.jbp.framework.dao <br>
 * Create Time : Apr 30, 2016 <br>
 * Create by : xiangyu_li@asdc.com.cn <br>
 * Copyright Â© 2006, 2016, ASDC DAI. All rights reserved.
 */
package com.asdc.jbp.framework.dao;

import java.util.List;

import javax.persistence.LockTimeoutException;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.PersistenceException;
import javax.persistence.PessimisticLockException;
import javax.persistence.QueryTimeoutException;
import javax.persistence.TransactionRequiredException;

import com.asdc.jbp.framework.exception.ServiceException;

/**
 * ClassName : NamedQueryOperator <br>
 * Description : Named query operator <br>
 * Create Time : Apr 30, 2016 <br>
 * Create by : xiangyu_li@asdc.com.cn <br>
 *
 */
public interface NamedQueryOperator {

    /**
     * Description : query list by given named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            the ordered parameter, these parameters will be put into the query one by one in number order.
     * @return a list of the results
     *
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public List<?> queryByNamedQuery(String queryName, Object... params);

    /**
     * Description : query list by given named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            {@link Parameter} list, and this will be set as the parameters into the query
     * @return a list of the results
     *
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public List<?> queryByNamedQuery(String queryName, List<Parameter> params);

    /**
     * Description : query list with given named query by page <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param start
     * @param limit if limit < 0 then will set it with {@link Integer#MAX_VALUE}
     * @param params
     *            the ordered parameter, these parameters will be put into the query one by one in number order.
     * @return a list of the results
     *
     * @throws ServiceException start < 0
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public List<?> queryByNamedQuery(String queryName, Integer start, Integer limit, Object... params) throws ServiceException;

    /**
     * Description : query list with given named query by page <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param start
     * @param limit if limit < 0 then will set it with {@link Integer#MAX_VALUE}
     * @param params
     *            {@link Parameter} list, and this will be set as the parameters into the query
     * @return a list of the results
     *
     * @throws ServiceException start < 0
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public List<?> queryByNamedQuery(String queryName, Integer start, Integer limit, List<Parameter> params) throws ServiceException;

    /**
     * Description : get count by a counting sql defined by named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            the ordered parameter, these parameters will be put into the query one by one in number order.
     * @return the result
     *
     * @throws NoResultException
     *             if there is no result
     * @throws NonUniqueResultException
     *             if more than one result
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Integer getCountByNamedQuery(String queryName, Object... params);

    /**
     * Description : get count by a counting sql defined by named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            {@link Parameter} list, and this will be set as the parameters into the query
     * @return the result
     *
     * @throws NoResultException
     *             if there is no result
     * @throws NonUniqueResultException
     *             if more than one result
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Integer getCountByNamedQuery(String queryName, List<Parameter> params);

    /**
     * Description : get sigle result by given named sql <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            the ordered parameter, these parameters will be put into the query one by one in number order.
     * @return the result
     *
     * @throws NoResultException
     *             if there is no result
     * @throws NonUniqueResultException
     *             if more than one result
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Object getSingleResultByNamedQuery(String queryName, Object... params);

    /**
     * Description : get sigle result by given named sql <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            {@link Parameter} list, and this will be set as the parameters into the query
     * @return the result
     *
     * @throws NoResultException
     *             if there is no result
     * @throws NonUniqueResultException
     *             if more than one result
     * @throws IllegalStateException
     *             if called for a Java Persistence query language UPDATE or DELETE statement
     * @throws QueryTimeoutException
     *             if the query execution exceeds the query timeout value set and only the statement is rolled back
     * @throws TransactionRequiredException
     *             if a lock mode has been set and there is no transaction
     * @throws PessimisticLockException
     *             if pessimistic locking fails and the transaction is rolled back
     * @throws LockTimeoutException
     *             if pessimistic locking fails and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Object getSingleResultByNamedQuery(String queryName, List<Parameter> params);

    /**
     * Description : Execute an update or delete statement. by named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            the ordered parameter, these parameters will be put into the query one by one in number order.
     * @return the number of entities updated or deleted
     *
     * @throws IllegalStateException
     *             if called for a Java Persistence query language SELECT statement or for a criteria query
     * @throws TransactionRequiredException
     *             if there is no transaction
     * @throws QueryTimeoutException
     *             if the statement execution exceeds the query timeout value set and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Integer executeByNamedQuery(String queryName, Object... params);

    /**
     * Description : Execute an update or delete statement. by named query <br>
     * Create Time: Apr 30, 2016 <br>
     * Create by : xiangyu_li@asdc.com.cn <br>
     *
     * @param queryName
     * @param params
     *            {@link Parameter} list, and this will be set as the parameters into the query
     * @return the number of entities updated or deleted
     *
     * @throws IllegalStateException
     *             if called for a Java Persistence query language SELECT statement or for a criteria query
     * @throws TransactionRequiredException
     *             if there is no transaction
     * @throws QueryTimeoutException
     *             if the statement execution exceeds the query timeout value set and only the statement is rolled back
     * @throws PersistenceException
     *             if the query execution exceeds the query timeout value set and the transaction is rolled back
     */
    public Integer executeByNamedQuery(String queryName, List<Parameter> params);

    /** 
     * Descriptionï¼ æ¥è¯¢æ°æ®æ»æ¡æ°
     * @param queryName hsqlName
     * @return int æ°æ®æ»é
     * @author nameï¼liujie <br>email: jie_liu1@asdc.com.cn
     **/
    int getAllCount(String queryName);

    
    
    /**
     * 
     * Description : HQLå¨æsqlæ¥è¯¢ <br>
     * Create Time: 2017å¹´3æ15æ¥ <br>
     * Create by : huayang_xu@asdc.com.cn <br>
     *
     * @param queryName å½åæ¥è¯¢åç§°
     * @param params è§£æåæ°
     * @return
     */
    public List<?> queryByNamedQueryDynamic(String queryName, List<Parameter> params);

    /**
     * 
     * Description : HQLå¨æsqlæ¥è¯¢ <br>
     * Create Time: 2017å¹´3æ17æ¥ <br>
     * Create by : huayang_xu@asdc.com.cn <br>
     *
     * @param queryName å½åæ¥è¯¢åç§°
     * @param params è§£æåæ°
     * @return
     */
	public List<?> queryByNamedQueryDynamic(String queryName, Object... params);

	/**
	 * 
	 * Description : åçsqlå¨ææ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params è§£æåæ°
	 * @return è¿åæ³åä¸ºMap
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, List<Parameter> params);
	
	/**
	 * 
	 * Description : åçsqlå¨ææ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params è§£æåæ°
	 * @return è¿åæ³åä¸ºMap
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Object... params);
	
	/**
	 * 
	 * Description : HQLå¨æsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit éå¶æ¡æ°
	 * @param params è§£æåæ°
	 * @return
	 */
	public List<?> queryByNamedQueryDynamic(String queryName, Integer start, Integer limit, List<Parameter> params)throws ServiceException;

	/**
	 * 
	 * Description : HQLå¨æsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit éå¶æ¡æ°
	 * @param params è§£æåæ°
	 * @return
	 */
	public List<?> queryByNamedQueryDynamic(String queryName, Integer start, Integer limit, Object... params)throws ServiceException;

	/**
	 * 
	 * Description : åçsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit æ¥è¯¢ä¸é
	 * @param params  æ¥è¯¢åæ°
	 * @return è¿åæ³åä¸ºMap
	 * @throws ServiceException
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Integer start, Integer limit, Object... params) throws ServiceException;
	
	/**
	 * 
	 * Description : åçsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ17æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit æ¥è¯¢ä¸é
	 * @param params æ¥è¯¢åæ°
	 * @return è¿åæ³åä¸ºMap
	 * @throws ServiceException
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Integer start, Integer limit, List<Parameter> params) throws ServiceException;

	/**
	 * 
	 * Description : åçsqlæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @param c è¿åå®ä½ç±»å
	 * @return The list in the specified object
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, List<Parameter> params, Class<?> c);

	/**
	 * 
	 * Description : åçsqlæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param c è¿åå®ä½ç±»å
	 * @param params params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return The list in the specified object
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Class<?> c, Object... params);

	/**
	 * 
	 * Description : åçsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit æ¥è¯¢ä¸é
	 * @param c æ³åå¯¹è±¡
	 * @param params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return
	 * @throws ServiceException
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Integer start, Integer limit, Class<?> c, Object... params) throws ServiceException;
	
	/**
	 * 
	 * Description : åçsqlåé¡µæ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param start å¼å§ä½ç½®
	 * @param limit æ¥è¯¢ä¸é
	 * @param params  æ¥è¯¢åæ°
	 * @param c æ³åå¯¹è±¡
	 * @return
	 * @throws ServiceException
	 */
	public List<?> queryByNamedQueryDynamicNative(String queryName, Integer start, Integer limit, List<Parameter> params, Class<?> c) throws ServiceException;

	/**
	 * 
	 * Description : get count by a counting sql defined by named queryO <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return
	 */
	public Integer getCountByNamedQueryDynamic(String queryName, Object... params);

	/**
	 * 
	 * Description : get count by a counting sql defined by named query <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Integer getCountByNamedQueryDynamic(String queryName, List<Parameter> params);
	
	/**
	 * 
	 * Description : get sigle result by given named sql <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return
	 */
	public Object getSingleResultByNamedQueryDynamic(String queryName, Object... params);

	/**
	 * 
	 * Description : get sigle result by given named sql <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Object getSingleResultByNamedQueryDynamic(String queryName, List<Parameter> params);

	/**
	 * 
	 * Description : Execute an update or delete statement. by named query <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return
	 */
	public Integer executeByNamedQueryDynamic(String queryName, Object... params);

	/**
	 * 
	 * Description :   Execute an update or delete statement. by named query<br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Integer executeByNamedQueryDynamic(String queryName, List<Parameter> params);

	/**
	 * 
	 * Description : è¿ååçå®ä½æ¥è¯¢<br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param c è¿åå®ä½ç±»å
	 * @param params æ¥è¯¢åæ° é»è®¤å°è£ä¸ºä¸ä¸ªkeyä¸ºparamsçmapï¼freemarkerä¸­è°ç¨æ­¤keyçå¼å³å¯
	 * @return
	 */
	public  Object getSingleResultByNamedQueryDynamicNative(String queryName, Class<?> c, Object... params);

	/**
	 * 
	 * Description : è¿ååçå®ä½æ¥è¯¢ <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @param c è¿åå®ä½ç±»å
	 * @return 
	 */
	public  Object getSingleResultByNamedQueryDynamicNative(String queryName, List<Parameter> params, Class<?> c);

	/**
	 * 
	 * Description : HQLæ¥è¯¢åä¸ªå®ä½,ä¸å­å¨è¿ånull,å¤ä¸ªè¿åç¬¬ä¸æ¡æ°æ®<br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Object findResultByNamedQueryDynamic(String queryName, Object... params);

	/**
	 * 
	 * Description : HQLæ¥è¯¢åä¸ªå®ä½,ä¸å­å¨è¿ånull,å¤ä¸ªè¿åç¬¬ä¸æ¡æ°æ® <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Object findResultByNamedQueryDynamic(String queryName, List<Parameter> params);

	/**
	 * 
	 * Description : åçHQLæ¥è¯¢åä¸ªå®ä½,ä¸å­å¨è¿ånull,å¤ä¸ªè¿åç¬¬ä¸æ¡æ°æ® <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param c å®ä½ç±»å
	 * @param params æ¥è¯¢åæ°
	 * @return
	 */
	public Object findResultByNamedQueryDynamicNative(String queryName, Class<?> c, Object... params);

	/**
	 * 
	 * Description : åçHQLæ¥è¯¢åä¸ªå®ä½,ä¸å­å¨è¿ånull,å¤ä¸ªè¿åç¬¬ä¸æ¡æ°æ® <br>
	 * Create Time: 2017å¹´3æ27æ¥ <br>
	 * Create by : huayang_xu@asdc.com.cn <br>
	 *
	 * @param queryName å½åæ¥è¯¢åç§°
	 * @param params æ¥è¯¢åæ°
	 * @param c å®ä½ç±»å
	 * @return
	 */
	public Object findResultByNamedQueryDynamicNative(String queryName, List<Parameter> params, Class<?> c);


	
}
